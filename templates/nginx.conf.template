{# This is how the available variables (with out _) could look like: -#}
{%- set _docker = {
  "name": 'hostname',
  "container_count": 12,
  "image_count": 42,
  "version": "18.01.0-ce",
  "api_version": "1.35",
  "go_version": "go1.9.2",
  "operating_system": "linux",
  "architecture": "amd64",
  "current_container_id": "1239asduad39dda9ds9da9d",
  "datetime": "datetime.now()",
} -%}
{%- set _services = [
  {
    "name": "dockertgbot_derpi_pon",
    "name_short": "derpi_pon",
    "mount_point": "",
    "buffer": True,
    "hosts": ["test-bots.example.com"],
    "enforce_https": "auto",
    "access": "socket",
    "protocol": "uwsgi",
    "scaled_instances": [
      {
        "id": "asdad98dadad9a8d2",
        "name": "dockertgbot_derpi_pon_1",
      }
    ],
    "environment": {
      "SOME_VAR": "value",
    },
  },
  {
    "name": "dockertgbot_sticker_tag",
    "name_short": "sticker_tag",
    "mount_point": "",
    "buffer": True,
    "enforce_https": "1",
    "hosts": ["getstickers.me"],
    "access": "net",
    "port": 80,
    "protocol": "http",
    "scaled_instances": [
      {
        "id": "asdad98dadad9a8d2",
        "name": "dockertgbot_sticker_tag_1",
      }
    ],
    "environment": {
      "SOME_VAR": "value",
    },
  },
  {
    "name": "agitated_booth",
    "name_short": "agitated_booth",
    "mount_point": "agitated_booth",
    "buffer": False,
    "enforce_https": "auto",
    "hosts": ["example.com"],
    "access": "net",
    "port": 80,
    "protocol": "http",
    "scaled_instances": [
      {
        "id": "3adasdah343asd",
        "name": "agitated_booth",
      }
    ],
    "environment": {
      "SOME_VAR": "value",
    },
  },
] -%}
{%- set _services_by_name = {
  "dockertgbot_derpi_pon": _services[0],
  "dockertgbot_sticker_tag": _services[1],
} -%}

{%- set _services_by_host = {
  "bots.example.com": [_services[0], _services[1]],
  "getstickers.me": [_services[1]],
  "test-bots.example.com": [_services[2]],
} -%}

###############
# Build stats
# Date: {{ docker.datetime.isoformat() }}
# Containers: {{ docker.container_count }}
# Images: {{ docker.image_count }}
# Build by [auto_proxy] running in container {{ docker.current_container_id }}.
###############

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
# access_log off;



# Default Server
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	access_log /var/log/nginx/access.log vhost;
	return 503;
}

resolver 127.0.0.11 valid=30s;

{%- for service in services %}
    upstream internal.{{ service.name }}.internal {
        least_conn;  # https://nginx.org/en/docs/http/ngx_http_upstream_module.html#least_conn
        {%- for host in service.hosts %}
            # host: {{ host }}
        {%- endfor %}
        {%- if service.access == "socket" %}
            # via socket
            {% for instance in service.scaled_instances -%}
                # {{ instance.name }}: {{ instance.id }}
            {% endfor -%}
            server unix:/sockets/bots/{{ service.socket_name }};
        {%- else %}
            # via network
            {%- for instance in service.scaled_instances %}
                # {{ instance.name }}: {{ instance.id }}
                server {{ instance.id[:12] }}:{{ service.port }};
            {%- endfor %}
        {%- endif %}
    }
{% endfor -%}

{%- for host, services in services_by_host.items() %}
server {
	server_name {{ host }};
	listen 80;
	access_log /var/log/nginx/access.log vhost;

    {% include (host + ".template") ignore missing with context %}

    {%- for service in services %}
        location /{{ service.mount_point }} {
            # https redirect
            {% if service.enforce_https == "auto" %}
                if ($proxy_x_forwarded_proto = "http") {
                    return 301 https://{{ host }}$request_uri;
                }
            {% if service.enforce_https == "proxy" %}
                if ($http_x_forwarded_proto = "http") {
                    return 301 https://{{ host }}$request_uri;
                }
            {% if service.enforce_https == "1" %}
                if ($scheme = "http") {
                    return 301 https://{{ host }}$request_uri;
                }
            {% else %}
                # no https enforced
            {% endif %}

            # HTTP 1.1 $ websocket support
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $proxy_connection;

            # buffering
            proxy_buffering {{ "on" if service.buffer else "off"}};

            # Mitigate httpoxy attack
            proxy_set_header Proxy "";

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Incoming-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
            proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
            proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

            proxy_set_header Connection $proxy_connection;
            proxy_set_header Upgrade $http_upgrade;
            {%- if service.protocol == 'uwsgi' %}
                include uwsgi_params;
                uwsgi_pass uwsgi://internal.{{ service.name }}.internal;
            {%- else %}
                proxy_pass http://internal.{{ service.name }}.internal;
            {%- endif %}
        }
    {%- endfor %}
}
{%- endfor %}

# end of file{# -#}
